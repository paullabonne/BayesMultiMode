% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MEM.R
\name{MEM}
\alias{MEM}
\title{Modal Expectation-Maximization algorithm (MEM)}
\usage{
MEM(mixture, tol_x = 1e-06, tol_conv = 1e-08)
}
\arguments{
\item{mixture}{An object of class Mixture.}

\item{tol_x}{Tolerance parameter for distance in-between modes; default is 1e-6; if two modes are closer than \code{tol_x}, only the first estimated mode is kept.}

\item{tol_conv}{Tolerance parameter for convergence of the algorithm; default is 1e-8.}
}
\value{
An object of class Mode.
}
\description{
Algorithm from Li and Lindsay (2007) to find modes in mixture of continuous distributions.
}
\details{
This algorithm returns the local maxima of the mixture
\deqn{p(x) = \sum_{k=1}^{K}\pi_k p_k(x),}
where \eqn{p_k} is a density function.
Following Li and Lindsay (2007), a mode \eqn{x} is found by iterating the two steps:
\deqn{(i) \quad p(k|x^{(n)}) = \frac{\pi_k p_k(x^{(n)})}{p(x^{(n)})},}
\deqn{(ii) \quad x^{(n+1)} = \text{argmax}_x  \sum_k p(k|x) \text{log} p_k(x^{(n)}),}
until convergence, that is, until \eqn{abs(x^{(n+1)}-x^{(n)})< \text{tol}_\text{conv}},
where \eqn{\text{tol}_\text{conv}} is an argument with default value \eqn{1e-8}.
The algorithm is started at each component location.
Separately, it is necessary to identify identical modes which diverge only up to
a small value. By default modes which are closer
than \eqn{sd(y)/10} are merged; this tolerance value can be controlled with the argument
\code{tol_x}.

While it is also possible to use the MEM algorithm for Normal mixtures, 
this is not recommended because the algorithm is less efficient than the
fixed-point method in this particular case.
}
\examples{

# Example with the skew normal =============================================
xi = c(0,6)
omega = c(1,2)
alpha = c(0,0)
p = c(0.8,0.2)
params = c(eta = p, xi = xi, omega = omega, alpha = alpha)
dist = "skew_normal"

mix = new_Mixture(params, dist = dist)
modes = MEM(mix)

# Example with an arbitrary distribution ===================================
xi = c(0,6)
omega = c(1,2)
alpha = c(0,0)
nu = c(3,100)
p = c(0.8,0.2)
params = c(eta = p, mu = xi, sigma = omega, xi = alpha, nu = nu)

pdf_func <- function(x, pars) {
  sn::dst(x, pars["mu"], pars["sigma"], pars["xi"], pars["nu"])
}

mix = new_Mixture(params, pdf_func = pdf_func, dist_type = "continuous")
modes = MEM(mix)

}
\references{
\insertRef{li_nonparametric_2007}{BayesMultiMode}\cr\cr
}

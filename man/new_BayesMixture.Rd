% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/new_BayesMixture.R
\name{new_BayesMixture}
\alias{new_BayesMixture}
\title{Creating a S3 object of class \code{BayesMixture}}
\usage{
new_BayesMixture(
  mcmc,
  data,
  burnin,
  dist = NA_character_,
  pdf_func = NULL,
  dist_type = NA_character_,
  loglik = NULL,
  vars_to_keep = NA_character_,
  loc = NA_character_
)
}
\arguments{
\item{mcmc}{A matrix of MCMC draws.}

\item{data}{A vector containing the data used for estimating the model and generating the MCMC draws.}

\item{burnin}{Number of draws to discard as burnin.}

\item{dist}{Distribution family of the mixture components supported by
the package (e.g. "normal", "student", "skew_normal" or "shifted_poisson").}

\item{pdf_func}{Pdf or pmf of the mixture components;
this input is used only if dist_name is invalid or NULL.}

\item{dist_type}{Either "continuous" or "discrete".}

\item{loglik}{Vector showing the log likelihood at each MCMC draw.}

\item{vars_to_keep}{(optional) Character vector containing the names
of the variables to keep in mcmc.}
}
\value{
A list of class \code{BayesMixture} containing:
\itemize{
 \item{data}{ - Same as argument.}
 \item{dist_type}{ - Same as argument.}
 \item{pars_names}{ - Names of distribution parameters.}
 \item{mcmc}{ - Matrix of MCMC draws where the rows corresponding to burnin have been discarded.}
 \item{mcmc_all}{ - Original matrix of MCMC draws.}
}
}
\description{
Function for creating an object of class \code{BayesMixture} which can subsequently be used as argument in [bayes_mode()].
This function is useful for users who want to use the mode inference functions of the package with MCMC output generated using 
other software packages.
}
\examples{

# Example with a Student t ================================================
mu = c(0.5,6)
mu_mat = matrix(rep(mu, 100) + rnorm(200, 0, 0.1),
            ncol = 2, byrow = T)

sigma = c(1,2)
sigma_mat = matrix(rep(sigma, 100) + rnorm(200, 0, 0.1),
            ncol = 2, byrow = T)

nu = c(5,5)
nu_mat = matrix(rep(nu, 100) + rnorm(200, 0, 0.1),
            ncol = 2, byrow = T)

eta = c(0.8,0.2)
eta_mat = matrix(rep(eta[1], 100) + rnorm(100, 0, 0.05),
            ncol = 1)
eta_mat = cbind(eta_mat,1-eta_mat)

xi_mat = matrix(0,100,2)

dist_type = "continuous"

data = c(sn::rst(eta[1]*1000, mu[1], sigma[1], nu = nu[1]),
        sn::rst(eta[2]*1000, mu[2], sigma[2], nu = nu[2]))

fit = cbind(eta_mat, mu_mat, sigma_mat, nu_mat, xi_mat)
colnames(fit) = c("eta1", "eta2", "mu1", "mu2",
                  "sigma1", "sigma2", "nu1", "nu2", "xi1", "xi2")
pdf_func = function(x, pars) {
  sn::dst(x, pars["mu"], pars["sigma"], pars["xi"], pars["nu"])
}

BM = new_BayesMixture(fit, data, burnin = 50,
pdf_func = pdf_func, dist_type = dist_type, loc = "xi")
# plot(BM)
}

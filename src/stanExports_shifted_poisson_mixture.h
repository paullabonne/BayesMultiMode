// Generated by rstantools.  Do not edit by hand.

/*
    BayesMultiMode is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesMultiMode is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesMultiMode.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_shifted_poisson_mixture_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'shifted_poisson_mixture', line 24, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 25, column 2 to column 29)",
                                                      " (in 'shifted_poisson_mixture', line 26, column 2 to column 40)",
                                                      " (in 'shifted_poisson_mixture', line 27, column 2 to column 28)",
                                                      " (in 'shifted_poisson_mixture', line 28, column 2 to column 52)",
                                                      " (in 'shifted_poisson_mixture', line 33, column 2 to column 35)",
                                                      " (in 'shifted_poisson_mixture', line 34, column 2 to column 15)",
                                                      " (in 'shifted_poisson_mixture', line 39, column 11 to column 12)",
                                                      " (in 'shifted_poisson_mixture', line 39, column 4 to column 18)",
                                                      " (in 'shifted_poisson_mixture', line 43, column 13 to column 20)",
                                                      " (in 'shifted_poisson_mixture', line 43, column 6 to column 48)",
                                                      " (in 'shifted_poisson_mixture', line 45, column 13 to column 20)",
                                                      " (in 'shifted_poisson_mixture', line 45, column 6 to column 25)",
                                                      " (in 'shifted_poisson_mixture', line 53, column 10 to column 27)",
                                                      " (in 'shifted_poisson_mixture', line 52, column 15 to line 54, column 9)",
                                                      " (in 'shifted_poisson_mixture', line 51, column 10 to column 87)",
                                                      " (in 'shifted_poisson_mixture', line 50, column 27 to line 52, column 9)",
                                                      " (in 'shifted_poisson_mixture', line 50, column 8 to line 54, column 9)",
                                                      " (in 'shifted_poisson_mixture', line 47, column 25 to line 56, column 7)",
                                                      " (in 'shifted_poisson_mixture', line 47, column 6 to line 56, column 7)",
                                                      " (in 'shifted_poisson_mixture', line 58, column 6 to column 31)",
                                                      " (in 'shifted_poisson_mixture', line 41, column 19 to line 59, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 41, column 4 to line 59, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 61, column 4 to column 29)",
                                                      " (in 'shifted_poisson_mixture', line 36, column 17 to line 62, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 36, column 2 to line 62, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 65, column 2 to column 25)",
                                                      " (in 'shifted_poisson_mixture', line 70, column 4 to column 29)",
                                                      " (in 'shifted_poisson_mixture', line 71, column 4 to column 47)",
                                                      " (in 'shifted_poisson_mixture', line 69, column 9 to line 72, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 68, column 4 to column 41)",
                                                      " (in 'shifted_poisson_mixture', line 67, column 10 to line 69, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 67, column 2 to line 72, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 79, column 4 to column 35)",
                                                      " (in 'shifted_poisson_mixture', line 81, column 6 to column 64)",
                                                      " (in 'shifted_poisson_mixture', line 80, column 19 to line 82, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 80, column 4 to line 82, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 78, column 9 to line 83, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 76, column 6 to column 58)",
                                                      " (in 'shifted_poisson_mixture', line 75, column 19 to line 77, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 75, column 4 to line 77, column 5)",
                                                      " (in 'shifted_poisson_mixture', line 74, column 16 to line 78, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 74, column 2 to line 83, column 3)",
                                                      " (in 'shifted_poisson_mixture', line 85, column 2 to column 20)",
                                                      " (in 'shifted_poisson_mixture', line 8, column 2 to column 17)",
                                                      " (in 'shifted_poisson_mixture', line 9, column 2 to column 17)",
                                                      " (in 'shifted_poisson_mixture', line 10, column 8 to column 9)",
                                                      " (in 'shifted_poisson_mixture', line 10, column 2 to column 11)",
                                                      " (in 'shifted_poisson_mixture', line 11, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 12, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 13, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 14, column 2 to column 10)",
                                                      " (in 'shifted_poisson_mixture', line 15, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 16, column 2 to column 25)",
                                                      " (in 'shifted_poisson_mixture', line 17, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 18, column 2 to column 19)",
                                                      " (in 'shifted_poisson_mixture', line 21, column 2 to column 21)",
                                                      " (in 'shifted_poisson_mixture', line 24, column 10 to column 11)",
                                                      " (in 'shifted_poisson_mixture', line 25, column 19 to column 20)",
                                                      " (in 'shifted_poisson_mixture', line 26, column 18 to column 32)",
                                                      " (in 'shifted_poisson_mixture', line 27, column 25 to column 26)",
                                                      " (in 'shifted_poisson_mixture', line 27, column 10 to column 17)",
                                                      " (in 'shifted_poisson_mixture', line 28, column 18 to column 38)",
                                                      " (in 'shifted_poisson_mixture', line 33, column 9 to column 10)",
                                                      " (in 'shifted_poisson_mixture', line 34, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_shifted_poisson_mixture final : public model_base_crtp<model_shifted_poisson_mixture> {
private:
  int K;
  int N;
  std::vector<int> y;
  double e0;
  double a0;
  double A0;
  double l0;
  double L0;
  double e0_kappa;
  double d0;
  double D0;
  int max_y;
  int alpha_1dim__;
  int kappa_2dim__;
  int alpha_kappa_1dim__;
 
public:
  ~model_shifted_poisson_mixture() { }
  
  inline std::string model_name() const final { return "model_shifted_poisson_mixture"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_shifted_poisson_mixture(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_shifted_poisson_mixture_namespace::model_shifted_poisson_mixture";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 45;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 45;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 46;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 46;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 46;
      current_statement__ = 46;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 47;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 48;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N));
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 48;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 49;
      context__.validate_dims("data initialization","e0","double",
          context__.to_vec());
      e0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      e0 = context__.vals_r("e0")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "e0", e0, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization","a0","double",
          context__.to_vec());
      a0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      a0 = context__.vals_r("a0")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "a0", a0, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","A0","double",
          context__.to_vec());
      A0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      A0 = context__.vals_r("A0")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "A0", A0, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","l0","double",
          context__.to_vec());
      l0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      l0 = context__.vals_r("l0")[(1 - 1)];
      current_statement__ = 53;
      context__.validate_dims("data initialization","L0","double",
          context__.to_vec());
      L0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      L0 = context__.vals_r("L0")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "L0", L0, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","e0_kappa","double",
          context__.to_vec());
      e0_kappa = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      e0_kappa = context__.vals_r("e0_kappa")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "e0_kappa", e0_kappa, 0);
      current_statement__ = 55;
      context__.validate_dims("data initialization","d0","double",
          context__.to_vec());
      d0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      d0 = context__.vals_r("d0")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "d0", d0, 0);
      current_statement__ = 56;
      context__.validate_dims("data initialization","D0","double",
          context__.to_vec());
      D0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 56;
      D0 = context__.vals_r("D0")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "D0", D0, 0);
      current_statement__ = 57;
      max_y = std::numeric_limits<int>::min();
      
      current_statement__ = 57;
      max_y = max(y);
      current_statement__ = 58;
      validate_positive_index("theta", "K", K);
      current_statement__ = 59;
      validate_non_negative_index("lambda", "K", K);
      current_statement__ = 60;
      alpha_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      alpha_1dim__ = (logical_gt(e0, 0) ? 0 : 1);
      current_statement__ = 60;
      validate_non_negative_index("alpha", "(e0 > 0) ? 0 : 1", alpha_1dim__);
      current_statement__ = 61;
      validate_non_negative_index("kappa", "K", K);
      current_statement__ = 62;
      kappa_2dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 62;
      kappa_2dim__ = (max_y + 1);
      current_statement__ = 62;
      validate_positive_index("kappa", "max_y + 1", kappa_2dim__);
      current_statement__ = 63;
      alpha_kappa_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 63;
      alpha_kappa_1dim__ = (logical_gt(e0_kappa, 0) ? 0 : 1);
      current_statement__ = 63;
      validate_non_negative_index("alpha_kappa", "(e0_kappa > 0) ? 0 : 1",
                                  alpha_kappa_1dim__);
      current_statement__ = 64;
      validate_non_negative_index("log_theta", "K", K);
      current_statement__ = 65;
      validate_non_negative_index("ll", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += (K - 1);
      num_params_r__ += K;
      num_params_r__ += alpha_1dim__;
      num_params_r__ += K * (kappa_2dim__ - 1);
      num_params_r__ += alpha_kappa_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_shifted_poisson_mixture_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(theta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((K - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta_in__ = in__.vector((K - 1));
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__, lp__),
          "assigning variable theta");
      } else {
        current_statement__ = 1;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__),
          "assigning variable theta");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda;
      lambda = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(lambda, DUMMY_VAR__);
      
      current_statement__ = 2;
      lambda = in__.vector(K);
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        assign(lambda, nil_index_list(),
          stan::math::positive_ordered_constrain(lambda, lp__),
          "assigning variable lambda");
      } else {
        current_statement__ = 2;
        assign(lambda, nil_index_list(),
          stan::math::positive_ordered_constrain(lambda),
          "assigning variable lambda");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 3;
      alpha = in__.vector(alpha_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 3;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> kappa;
      kappa = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(kappa_2dim__));
      stan::math::fill(kappa, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> kappa_in__;
      kappa_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (kappa_2dim__ - 1)));
      stan::math::fill(kappa_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(kappa_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((kappa_2dim__ - 1)), "assigning variable kappa_in__");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(kappa, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(kappa_in__[(sym1__ - 1)], lp__),
            "assigning variable kappa");
        } else {
          current_statement__ = 4;
          assign(kappa, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::simplex_constrain(kappa_in__[(sym1__ - 1)]),
            "assigning variable kappa");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_kappa;
      alpha_kappa = Eigen::Matrix<local_scalar_t__, -1, 1>(alpha_kappa_1dim__);
      stan::math::fill(alpha_kappa, DUMMY_VAR__);
      
      current_statement__ = 5;
      alpha_kappa = in__.vector(alpha_kappa_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(alpha_kappa, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_kappa[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha_kappa");
        } else {
          current_statement__ = 5;
          assign(alpha_kappa, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_kappa[(sym1__ - 1)], 0),
            "assigning variable alpha_kappa");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> log_theta;
      log_theta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(log_theta, DUMMY_VAR__);
      
      current_statement__ = 6;
      assign(log_theta, nil_index_list(), stan::math::log(theta),
        "assigning variable log_theta");
      Eigen::Matrix<local_scalar_t__, -1, 1> ll;
      ll = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(ll, DUMMY_VAR__);
      
      current_statement__ = 26;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 8;
        validate_non_negative_index("lps", "K", K);
        Eigen::Matrix<local_scalar_t__, -1, 1> lps;
        lps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
        stan::math::fill(lps, DUMMY_VAR__);
        
        current_statement__ = 23;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 10;
          validate_non_negative_index("log_kappa", "max_y + 1", (max_y + 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> log_kappa;
          log_kappa = Eigen::Matrix<local_scalar_t__, -1, 1>((max_y + 1));
          stan::math::fill(log_kappa, DUMMY_VAR__);
          
          current_statement__ = 11;
          assign(log_kappa, nil_index_list(),
            stan::math::log(kappa[(k - 1)]), "assigning variable log_kappa");
          current_statement__ = 12;
          validate_non_negative_index("lp", "max_y + 1", (max_y + 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> lp;
          lp = Eigen::Matrix<local_scalar_t__, -1, 1>((max_y + 1));
          stan::math::fill(lp, DUMMY_VAR__);
          
          current_statement__ = 20;
          for (int j = 0; j <= max_y; ++j) {
            current_statement__ = 18;
            if (logical_gt((y[(n - 1)] - j), -1)) {
              current_statement__ = 16;
              assign(lp, cons_list(index_uni((j + 1)), nil_index_list()),
                ((log_theta[(k - 1)] + log_kappa[((j + 1) - 1)]) +
                  poisson_lpmf<false>((y[(n - 1)] - j), lambda[(k - 1)])),
                "assigning variable lp");
            } else {
              current_statement__ = 14;
              assign(lp, cons_list(index_uni((j + 1)), nil_index_list()),
                stan::math::log(0), "assigning variable lp");
            }}
          current_statement__ = 21;
          assign(lps, cons_list(index_uni(k), nil_index_list()),
            log_sum_exp(lp), "assigning variable lps");}
        current_statement__ = 24;
        assign(ll, cons_list(index_uni(n), nil_index_list()),
          log_sum_exp(lps), "assigning variable ll");}
      {
        current_statement__ = 27;
        lp_accum__.add(gamma_lpdf<propto__>(lambda, l0, L0));
        current_statement__ = 33;
        if (logical_gt(e0, 0)) {
          current_statement__ = 31;
          lp_accum__.add(dirichlet_lpdf<propto__>(theta, rep_vector(e0, K)));
        } else {
          current_statement__ = 28;
          lp_accum__.add(gamma_lpdf<propto__>(alpha[(1 - 1)], a0, A0));
          current_statement__ = 29;
          lp_accum__.add(
            dirichlet_lpdf<propto__>(theta, rep_vector(alpha[(1 - 1)], K)));
        }
        current_statement__ = 43;
        if (logical_gt(e0_kappa, 0)) {
          current_statement__ = 41;
          for (int i = 1; i <= K; ++i) {
            current_statement__ = 39;
            lp_accum__.add(
              dirichlet_lpdf<propto__>(kappa[(i - 1)],
                rep_vector(e0_kappa, (max_y + 1))));}
        } else {
          current_statement__ = 34;
          lp_accum__.add(gamma_lpdf<propto__>(alpha_kappa[(1 - 1)], d0, D0));
          current_statement__ = 37;
          for (int i = 1; i <= K; ++i) {
            current_statement__ = 35;
            lp_accum__.add(
              dirichlet_lpdf<propto__>(kappa[(i - 1)],
                rep_vector(alpha_kappa[(1 - 1)], (max_y + 1))));}
        }
        current_statement__ = 44;
        lp_accum__.add(sum(ll));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_shifted_poisson_mixture_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((K - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta_in__ = in__.vector((K - 1));
      current_statement__ = 1;
      assign(theta, nil_index_list(),
        stan::math::simplex_constrain(theta_in__), "assigning variable theta");
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      lambda = in__.vector(K);
      current_statement__ = 2;
      assign(lambda, nil_index_list(),
        stan::math::positive_ordered_constrain(lambda),
        "assigning variable lambda");
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      alpha = in__.vector(alpha_1dim__);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      std::vector<Eigen::Matrix<double, -1, 1>> kappa;
      kappa = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(kappa_2dim__));
      stan::math::fill(kappa, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> kappa_in__;
      kappa_in__ = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(K, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (kappa_2dim__ - 1)));
      stan::math::fill(kappa_in__, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(kappa_in__, cons_list(index_uni(sym1__), nil_index_list()),
          in__.vector((kappa_2dim__ - 1)), "assigning variable kappa_in__");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(kappa, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_constrain(kappa_in__[(sym1__ - 1)]),
          "assigning variable kappa");}
      Eigen::Matrix<double, -1, 1> alpha_kappa;
      alpha_kappa = Eigen::Matrix<double, -1, 1>(alpha_kappa_1dim__);
      stan::math::fill(alpha_kappa, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      alpha_kappa = in__.vector(alpha_kappa_1dim__);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(alpha_kappa, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha_kappa[(sym1__ - 1)], 0),
          "assigning variable alpha_kappa");}
      Eigen::Matrix<double, -1, 1> log_theta;
      log_theta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(log_theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> ll;
      ll = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(ll, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= kappa_2dim__; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          vars__.emplace_back(kappa[(sym2__ - 1)][(sym1__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_kappa[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      assign(log_theta, nil_index_list(), stan::math::log(theta),
        "assigning variable log_theta");
      current_statement__ = 26;
      for (int n = 1; n <= N; ++n) {
        current_statement__ = 8;
        validate_non_negative_index("lps", "K", K);
        Eigen::Matrix<double, -1, 1> lps;
        lps = Eigen::Matrix<double, -1, 1>(K);
        stan::math::fill(lps, std::numeric_limits<double>::quiet_NaN());
        
        current_statement__ = 23;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 10;
          validate_non_negative_index("log_kappa", "max_y + 1", (max_y + 1));
          Eigen::Matrix<double, -1, 1> log_kappa;
          log_kappa = Eigen::Matrix<double, -1, 1>((max_y + 1));
          stan::math::fill(log_kappa, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 11;
          assign(log_kappa, nil_index_list(),
            stan::math::log(kappa[(k - 1)]), "assigning variable log_kappa");
          current_statement__ = 12;
          validate_non_negative_index("lp", "max_y + 1", (max_y + 1));
          Eigen::Matrix<double, -1, 1> lp;
          lp = Eigen::Matrix<double, -1, 1>((max_y + 1));
          stan::math::fill(lp, std::numeric_limits<double>::quiet_NaN());
          
          current_statement__ = 20;
          for (int j = 0; j <= max_y; ++j) {
            current_statement__ = 18;
            if (logical_gt((y[(n - 1)] - j), -1)) {
              current_statement__ = 16;
              assign(lp, cons_list(index_uni((j + 1)), nil_index_list()),
                ((log_theta[(k - 1)] + log_kappa[((j + 1) - 1)]) +
                  poisson_lpmf<false>((y[(n - 1)] - j), lambda[(k - 1)])),
                "assigning variable lp");
            } else {
              current_statement__ = 14;
              assign(lp, cons_list(index_uni((j + 1)), nil_index_list()),
                stan::math::log(0), "assigning variable lp");
            }}
          current_statement__ = 21;
          assign(lps, cons_list(index_uni(k), nil_index_list()),
            log_sum_exp(lp), "assigning variable lps");}
        current_statement__ = 24;
        assign(ll, cons_list(index_uni(n), nil_index_list()),
          log_sum_exp(lps), "assigning variable ll");}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          vars__.emplace_back(log_theta[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(ll[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 1;
        assign(theta_flat__, nil_index_list(), context__.vals_r("theta"),
          "assigning variable theta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            theta_flat__[(pos__ - 1)], "assigning variable theta");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_free__;
      theta_free__ = Eigen::Matrix<double, -1, 1>((K - 1));
      stan::math::fill(theta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(theta_free__, nil_index_list(), stan::math::simplex_free(theta),
        "assigning variable theta_free__");
      Eigen::Matrix<double, -1, 1> lambda;
      lambda = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(lambda, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_flat__;
        current_statement__ = 2;
        assign(lambda_flat__, nil_index_list(), context__.vals_r("lambda"),
          "assigning variable lambda_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            lambda_flat__[(pos__ - 1)], "assigning variable lambda");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_free__;
      lambda_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(lambda_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(lambda_free__, nil_index_list(),
        stan::math::positive_ordered_free(lambda),
        "assigning variable lambda_free__");
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 3;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
          current_statement__ = 3;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      std::vector<Eigen::Matrix<double, -1, 1>> kappa;
      kappa = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(kappa_2dim__));
      stan::math::fill(kappa, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> kappa_flat__;
        current_statement__ = 4;
        assign(kappa_flat__, nil_index_list(), context__.vals_r("kappa"),
          "assigning variable kappa_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= kappa_2dim__; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            current_statement__ = 4;
            assign(kappa,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              kappa_flat__[(pos__ - 1)], "assigning variable kappa");
            current_statement__ = 4;
            pos__ = (pos__ + 1);}}
      }
      std::vector<Eigen::Matrix<double, -1, 1>> kappa_free__;
      kappa_free__ = std::vector<Eigen::Matrix<double, -1, 1>>(K, Eigen::Matrix<double, -1, 1>(
        (kappa_2dim__ - 1)));
      stan::math::fill(kappa_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(kappa_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::simplex_free(kappa[(sym1__ - 1)]),
          "assigning variable kappa_free__");}
      Eigen::Matrix<double, -1, 1> alpha_kappa;
      alpha_kappa = Eigen::Matrix<double, -1, 1>(alpha_kappa_1dim__);
      stan::math::fill(alpha_kappa, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_kappa_flat__;
        current_statement__ = 5;
        assign(alpha_kappa_flat__, nil_index_list(),
          context__.vals_r("alpha_kappa"),
          "assigning variable alpha_kappa_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(alpha_kappa, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_kappa_flat__[(pos__ - 1)], "assigning variable alpha_kappa");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_kappa_free__;
      alpha_kappa_free__ = Eigen::Matrix<double, -1, 1>(alpha_kappa_1dim__);
      stan::math::fill(alpha_kappa_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(alpha_kappa_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha_kappa[(sym1__ - 1)], 0),
          "assigning variable alpha_kappa_free__");}
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(lambda_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= (kappa_2dim__ - 1); ++sym2__) {
          vars__.emplace_back(kappa_free__[(sym1__ - 1)][(sym2__ - 1)]);}}
      for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_kappa_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta");
    names__.emplace_back("lambda");
    names__.emplace_back("alpha");
    names__.emplace_back("kappa");
    names__.emplace_back("alpha_kappa");
    names__.emplace_back("log_theta");
    names__.emplace_back("ll");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K),
                                             static_cast<size_t>(kappa_2dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_kappa_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= kappa_2dim__; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_kappa" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ll" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= (kappa_2dim__ - 1); ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= alpha_kappa_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_kappa" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_theta" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "ll" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << kappa_2dim__ << "}},\"block\":\"parameters\"},{\"name\":\"alpha_kappa\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_kappa_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"log_theta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"ll\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << (K - 1) << "},\"block\":\"parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (kappa_2dim__ - 1) << "}},\"block\":\"parameters\"},{\"name\":\"alpha_kappa\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_kappa_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"log_theta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"transformed_parameters\"},{\"name\":\"ll\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_shifted_poisson_mixture_namespace::model_shifted_poisson_mixture;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_shifted_poisson_mixture_namespace::profiles__;
}
#endif
#endif

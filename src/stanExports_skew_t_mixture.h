// Generated by rstantools.  Do not edit by hand.

/*
    BayesMultiMode is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesMultiMode is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesMultiMode.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_skew_t_mixture_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'skew_t_mixture', line 32, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 33, column 2 to column 16)",
                                                      " (in 'skew_t_mixture', line 34, column 2 to column 27)",
                                                      " (in 'skew_t_mixture', line 35, column 2 to column 13)",
                                                      " (in 'skew_t_mixture', line 36, column 2 to column 24)",
                                                      " (in 'skew_t_mixture', line 37, column 2 to column 37)",
                                                      " (in 'skew_t_mixture', line 38, column 2 to column 40)",
                                                      " (in 'skew_t_mixture', line 41, column 11 to column 12)",
                                                      " (in 'skew_t_mixture', line 41, column 4 to column 24)",
                                                      " (in 'skew_t_mixture', line 42, column 9 to column 10)",
                                                      " (in 'skew_t_mixture', line 42, column 2 to column 21)",
                                                      " (in 'skew_t_mixture', line 47, column 6 to column 32)",
                                                      " (in 'skew_t_mixture', line 46, column 9 to line 48, column 3)",
                                                      " (in 'skew_t_mixture', line 44, column 6 to column 25)",
                                                      " (in 'skew_t_mixture', line 45, column 6 to column 32)",
                                                      " (in 'skew_t_mixture', line 43, column 11 to line 46, column 3)",
                                                      " (in 'skew_t_mixture', line 43, column 2 to line 48, column 3)",
                                                      " (in 'skew_t_mixture', line 49, column 2 to column 22)",
                                                      " (in 'skew_t_mixture', line 50, column 2 to column 22)",
                                                      " (in 'skew_t_mixture', line 54, column 4 to column 29)",
                                                      " (in 'skew_t_mixture', line 55, column 4 to column 47)",
                                                      " (in 'skew_t_mixture', line 53, column 9 to line 56, column 3)",
                                                      " (in 'skew_t_mixture', line 52, column 4 to column 41)",
                                                      " (in 'skew_t_mixture', line 51, column 10 to line 53, column 3)",
                                                      " (in 'skew_t_mixture', line 51, column 2 to line 56, column 3)",
                                                      " (in 'skew_t_mixture', line 57, column 4 to column 27)",
                                                      " (in 'skew_t_mixture', line 58, column 2 to column 21)",
                                                      " (in 'skew_t_mixture', line 60, column 4 to column 33)",
                                                      " (in 'skew_t_mixture', line 59, column 17 to line 61, column 3)",
                                                      " (in 'skew_t_mixture', line 59, column 2 to line 61, column 3)",
                                                      " (in 'skew_t_mixture', line 63, column 11 to column 12)",
                                                      " (in 'skew_t_mixture', line 63, column 4 to column 30)",
                                                      " (in 'skew_t_mixture', line 65, column 6 to column 69)",
                                                      " (in 'skew_t_mixture', line 64, column 19 to line 66, column 5)",
                                                      " (in 'skew_t_mixture', line 64, column 4 to line 66, column 5)",
                                                      " (in 'skew_t_mixture', line 67, column 4 to column 31)",
                                                      " (in 'skew_t_mixture', line 62, column 17 to line 68, column 3)",
                                                      " (in 'skew_t_mixture', line 62, column 2 to line 68, column 3)",
                                                      " (in 'skew_t_mixture', line 15, column 2 to column 17)",
                                                      " (in 'skew_t_mixture', line 16, column 2 to column 17)",
                                                      " (in 'skew_t_mixture', line 17, column 9 to column 10)",
                                                      " (in 'skew_t_mixture', line 17, column 2 to column 12)",
                                                      " (in 'skew_t_mixture', line 18, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 19, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 20, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 21, column 2 to column 10)",
                                                      " (in 'skew_t_mixture', line 22, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 23, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 24, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 25, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 26, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 27, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 28, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 29, column 2 to column 19)",
                                                      " (in 'skew_t_mixture', line 32, column 10 to column 11)",
                                                      " (in 'skew_t_mixture', line 33, column 10 to column 11)",
                                                      " (in 'skew_t_mixture', line 34, column 18 to column 19)",
                                                      " (in 'skew_t_mixture', line 35, column 10 to column 11)",
                                                      " (in 'skew_t_mixture', line 36, column 18 to column 19)",
                                                      " (in 'skew_t_mixture', line 37, column 18 to column 32)",
                                                      " (in 'skew_t_mixture', line 38, column 18 to column 32)",
                                                      " (in 'skew_t_mixture', line 7, column 4 to column 30)",
                                                      " (in 'skew_t_mixture', line 8, column 4 to column 41)",
                                                      " (in 'skew_t_mixture', line 9, column 4 to column 48)",
                                                      " (in 'skew_t_mixture', line 10, column 4 to column 55)",
                                                      " (in 'skew_t_mixture', line 11, column 4 to column 52)",
                                                      " (in 'skew_t_mixture', line 6, column 66 to line 12, column 3)"};
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
skew_t_lpdf(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
            const T4__& nu, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          T2__,
          T3__,
          T4__>;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ z;
    z = DUMMY_VAR__;
    
    current_statement__ = 62;
    z = ((y - mu) / sigma);
    local_scalar_t__ w;
    w = DUMMY_VAR__;
    
    current_statement__ = 63;
    w = stan::math::sqrt(((nu + 1) / (nu + pow(z, 2))));
    local_scalar_t__ log_t_f;
    log_t_f = DUMMY_VAR__;
    
    current_statement__ = 64;
    log_t_f = student_t_lpdf<false>(z, nu, 0, 1);
    local_scalar_t__ log_t_F;
    log_t_F = DUMMY_VAR__;
    
    current_statement__ = 65;
    log_t_F = student_t_lcdf(((xi * z) * w), (nu + 1), 0, 1);
    current_statement__ = 66;
    return (((stan::math::log2() + -stan::math::log(sigma)) + log_t_f) +
             log_t_F);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct skew_t_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__, typename T2__,
typename T3__, typename T4__>
stan::promote_args_t<T0__, T1__, T2__, T3__,
T4__>
operator()(const T0__& y, const T1__& mu, const T2__& sigma, const T3__& xi,
           const T4__& nu, std::ostream* pstream__)  const 
{
return skew_t_lpdf<propto__>(y, mu, sigma, xi, nu, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_skew_t_mixture final : public model_base_crtp<model_skew_t_mixture> {
private:
  int K;
  int N;
  std::vector<double> y;
  double e0;
  double a0;
  double A0;
  double b0;
  double B0;
  double c0;
  double g0;
  double G0;
  double h0;
  double H0;
  double n0;
  double N0;
  int C0_1dim__;
  int alpha_1dim__;
 
public:
  ~model_skew_t_mixture() { }
  
  inline std::string model_name() const final { return "model_skew_t_mixture"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_skew_t_mixture(stan::io::var_context& context__,
                       unsigned int random_seed__ = 0,
                       std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_skew_t_mixture_namespace::model_skew_t_mixture";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 39;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 39;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 39;
      current_statement__ = 39;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 40;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 40;
      current_statement__ = 40;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 41;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 42;
      context__.validate_dims("data initialization","y","double",
          context__.to_vec(N));
      y = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 42;
      assign(y, nil_index_list(), context__.vals_r("y"),
        "assigning variable y");
      current_statement__ = 43;
      context__.validate_dims("data initialization","e0","double",
          context__.to_vec());
      e0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 43;
      e0 = context__.vals_r("e0")[(1 - 1)];
      current_statement__ = 43;
      current_statement__ = 43;
      check_greater_or_equal(function__, "e0", e0, 0);
      current_statement__ = 44;
      context__.validate_dims("data initialization","a0","double",
          context__.to_vec());
      a0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 44;
      a0 = context__.vals_r("a0")[(1 - 1)];
      current_statement__ = 44;
      current_statement__ = 44;
      check_greater_or_equal(function__, "a0", a0, 0);
      current_statement__ = 45;
      context__.validate_dims("data initialization","A0","double",
          context__.to_vec());
      A0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 45;
      A0 = context__.vals_r("A0")[(1 - 1)];
      current_statement__ = 45;
      current_statement__ = 45;
      check_greater_or_equal(function__, "A0", A0, 0);
      current_statement__ = 46;
      context__.validate_dims("data initialization","b0","double",
          context__.to_vec());
      b0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 46;
      b0 = context__.vals_r("b0")[(1 - 1)];
      current_statement__ = 47;
      context__.validate_dims("data initialization","B0","double",
          context__.to_vec());
      B0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 47;
      B0 = context__.vals_r("B0")[(1 - 1)];
      current_statement__ = 47;
      current_statement__ = 47;
      check_greater_or_equal(function__, "B0", B0, 0);
      current_statement__ = 48;
      context__.validate_dims("data initialization","c0","double",
          context__.to_vec());
      c0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 48;
      c0 = context__.vals_r("c0")[(1 - 1)];
      current_statement__ = 48;
      current_statement__ = 48;
      check_greater_or_equal(function__, "c0", c0, 0);
      current_statement__ = 49;
      context__.validate_dims("data initialization","g0","double",
          context__.to_vec());
      g0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 49;
      g0 = context__.vals_r("g0")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "g0", g0, 0);
      current_statement__ = 50;
      context__.validate_dims("data initialization","G0","double",
          context__.to_vec());
      G0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 50;
      G0 = context__.vals_r("G0")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "G0", G0, 0);
      current_statement__ = 51;
      context__.validate_dims("data initialization","h0","double",
          context__.to_vec());
      h0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 51;
      h0 = context__.vals_r("h0")[(1 - 1)];
      current_statement__ = 51;
      current_statement__ = 51;
      check_greater_or_equal(function__, "h0", h0, 0);
      current_statement__ = 52;
      context__.validate_dims("data initialization","H0","double",
          context__.to_vec());
      H0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      H0 = context__.vals_r("H0")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "H0", H0, 0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","n0","double",
          context__.to_vec());
      n0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      n0 = context__.vals_r("n0")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "n0", n0, 0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","N0","double",
          context__.to_vec());
      N0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      N0 = context__.vals_r("N0")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "N0", N0, 0);
      current_statement__ = 55;
      validate_positive_index("theta", "K", K);
      current_statement__ = 56;
      validate_non_negative_index("mu", "K", K);
      current_statement__ = 57;
      validate_non_negative_index("sigma", "K", K);
      current_statement__ = 58;
      validate_non_negative_index("xi", "K", K);
      current_statement__ = 59;
      validate_non_negative_index("nu", "K", K);
      current_statement__ = 60;
      C0_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 60;
      C0_1dim__ = (logical_gt(G0, 0) ? K : 0);
      current_statement__ = 60;
      validate_non_negative_index("C0", "(G0 > 0) ? K : 0", C0_1dim__);
      current_statement__ = 61;
      alpha_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 61;
      alpha_1dim__ = (logical_gt(e0, 0) ? 0 : 1);
      current_statement__ = 61;
      validate_non_negative_index("alpha", "(e0 > 0) ? 0 : 1", alpha_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += (K - 1);
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += K;
      num_params_r__ += C0_1dim__;
      num_params_r__ += alpha_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_skew_t_mixture_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(theta, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((K - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta_in__ = in__.vector((K - 1));
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__, lp__),
          "assigning variable theta");
      } else {
        current_statement__ = 1;
        assign(theta, nil_index_list(),
          stan::math::simplex_constrain(theta_in__),
          "assigning variable theta");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 2;
      mu = in__.vector(K);
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        assign(mu, nil_index_list(), stan::math::ordered_constrain(mu, lp__),
          "assigning variable mu");
      } else {
        current_statement__ = 2;
        assign(mu, nil_index_list(), stan::math::ordered_constrain(mu),
          "assigning variable mu");
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
      sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(sigma, DUMMY_VAR__);
      
      current_statement__ = 3;
      sigma = in__.vector(K);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0, lp__),
            "assigning variable sigma");
        } else {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
            "assigning variable sigma");
        }}
      std::vector<local_scalar_t__> xi;
      xi = std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(xi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable xi");}
      Eigen::Matrix<local_scalar_t__, -1, 1> nu;
      nu = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
      stan::math::fill(nu, DUMMY_VAR__);
      
      current_statement__ = 5;
      nu = in__.vector(K);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 1, lp__),
            "assigning variable nu");
        } else {
          current_statement__ = 5;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(nu[(sym1__ - 1)], 1),
            "assigning variable nu");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> C0;
      C0 = Eigen::Matrix<local_scalar_t__, -1, 1>(C0_1dim__);
      stan::math::fill(C0, DUMMY_VAR__);
      
      current_statement__ = 6;
      C0 = in__.vector(C0_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
        current_statement__ = 6;
        if (jacobian__) {
          current_statement__ = 6;
          assign(C0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(C0[(sym1__ - 1)], 0, lp__),
            "assigning variable C0");
        } else {
          current_statement__ = 6;
          assign(C0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(C0[(sym1__ - 1)], 0),
            "assigning variable C0");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 7;
      alpha = in__.vector(alpha_1dim__);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 7;
        if (jacobian__) {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0, lp__),
            "assigning variable alpha");
        } else {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
            "assigning variable alpha");
        }}
      {
        current_statement__ = 8;
        validate_non_negative_index("log_theta", "K", K);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_theta;
        log_theta = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
        stan::math::fill(log_theta, DUMMY_VAR__);
        
        current_statement__ = 10;
        validate_non_negative_index("sigma_tr", "K", K);
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma_tr;
        sigma_tr = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
        stan::math::fill(sigma_tr, DUMMY_VAR__);
        
        current_statement__ = 17;
        if (logical_gt(G0, 0)) {
          current_statement__ = 14;
          lp_accum__.add(gamma_lpdf<propto__>(C0, g0, G0));
          current_statement__ = 15;
          lp_accum__.add(inv_gamma_lpdf<propto__>(sigma, c0, C0));
        } else {
          current_statement__ = 12;
          lp_accum__.add(inv_gamma_lpdf<propto__>(sigma, c0, g0));
        }
        current_statement__ = 18;
        lp_accum__.add(normal_lpdf<propto__>(mu, b0, B0));
        current_statement__ = 19;
        lp_accum__.add(normal_lpdf<propto__>(xi, h0, H0));
        current_statement__ = 25;
        if (logical_gt(e0, 0)) {
          current_statement__ = 23;
          lp_accum__.add(dirichlet_lpdf<propto__>(theta, rep_vector(e0, K)));
        } else {
          current_statement__ = 20;
          lp_accum__.add(gamma_lpdf<propto__>(alpha[(1 - 1)], a0, A0));
          current_statement__ = 21;
          lp_accum__.add(
            dirichlet_lpdf<propto__>(theta, rep_vector(alpha[(1 - 1)], K)));
        }
        current_statement__ = 26;
        assign(log_theta, nil_index_list(), stan::math::log(theta),
          "assigning variable log_theta");
        current_statement__ = 27;
        lp_accum__.add(gamma_lpdf<propto__>(nu, n0, N0));
        current_statement__ = 30;
        for (int k = 1; k <= K; ++k) {
          current_statement__ = 28;
          assign(sigma_tr, cons_list(index_uni(k), nil_index_list()),
            stan::math::sqrt(sigma[(k - 1)]), "assigning variable sigma_tr");
        }
        current_statement__ = 38;
        for (int n = 1; n <= N; ++n) {
          current_statement__ = 31;
          validate_non_negative_index("lps", "K", K);
          Eigen::Matrix<local_scalar_t__, -1, 1> lps;
          lps = Eigen::Matrix<local_scalar_t__, -1, 1>(K);
          stan::math::fill(lps, DUMMY_VAR__);
          
          current_statement__ = 32;
          assign(lps, nil_index_list(), log_theta, "assigning variable lps");
          current_statement__ = 35;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 33;
            assign(lps, cons_list(index_uni(k), nil_index_list()),
              (lps[(k - 1)] +
                skew_t_lpdf<false>(y[(n - 1)], mu[(k - 1)],
                  sigma_tr[(k - 1)], xi[(k - 1)], nu[(k - 1)], pstream__)),
              "assigning variable lps");}
          current_statement__ = 36;
          lp_accum__.add(log_sum_exp(lps));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_skew_t_mixture_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_in__;
      theta_in__ = Eigen::Matrix<local_scalar_t__, -1, 1>((K - 1));
      stan::math::fill(theta_in__, DUMMY_VAR__);
      
      current_statement__ = 1;
      theta_in__ = in__.vector((K - 1));
      current_statement__ = 1;
      assign(theta, nil_index_list(),
        stan::math::simplex_constrain(theta_in__), "assigning variable theta");
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      mu = in__.vector(K);
      current_statement__ = 2;
      assign(mu, nil_index_list(), stan::math::ordered_constrain(mu),
        "assigning variable mu");
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      sigma = in__.vector(K);
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma");}
      std::vector<double> xi;
      xi = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 4;
        assign(xi, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable xi");}
      Eigen::Matrix<double, -1, 1> nu;
      nu = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(nu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      nu = in__.vector(K);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 5;
        assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(nu[(sym1__ - 1)], 1),
          "assigning variable nu");}
      Eigen::Matrix<double, -1, 1> C0;
      C0 = Eigen::Matrix<double, -1, 1>(C0_1dim__);
      stan::math::fill(C0, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      C0 = in__.vector(C0_1dim__);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(C0, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(C0[(sym1__ - 1)], 0),
          "assigning variable C0");}
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      alpha = in__.vector(alpha_1dim__);
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha");}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(theta[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(xi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(nu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
        vars__.emplace_back(C0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> theta_flat__;
        current_statement__ = 1;
        assign(theta_flat__, nil_index_list(), context__.vals_r("theta"),
          "assigning variable theta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 1;
          assign(theta, cons_list(index_uni(sym1__), nil_index_list()),
            theta_flat__[(pos__ - 1)], "assigning variable theta");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> theta_free__;
      theta_free__ = Eigen::Matrix<double, -1, 1>((K - 1));
      stan::math::fill(theta_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(theta_free__, nil_index_list(), stan::math::simplex_free(theta),
        "assigning variable theta_free__");
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_flat__;
        current_statement__ = 2;
        assign(mu_flat__, nil_index_list(), context__.vals_r("mu"),
          "assigning variable mu_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 2;
          assign(mu, cons_list(index_uni(sym1__), nil_index_list()),
            mu_flat__[(pos__ - 1)], "assigning variable mu");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu_free__;
      mu_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(mu_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(mu_free__, nil_index_list(), stan::math::ordered_free(mu),
        "assigning variable mu_free__");
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> sigma_flat__;
        current_statement__ = 3;
        assign(sigma_flat__, nil_index_list(), context__.vals_r("sigma"),
          "assigning variable sigma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 3;
          assign(sigma, cons_list(index_uni(sym1__), nil_index_list()),
            sigma_flat__[(pos__ - 1)], "assigning variable sigma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> sigma_free__;
      sigma_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(sigma_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma[(sym1__ - 1)], 0),
          "assigning variable sigma_free__");}
      std::vector<double> xi;
      xi = std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(xi, nil_index_list(), context__.vals_r("xi"),
        "assigning variable xi");
      Eigen::Matrix<double, -1, 1> nu;
      nu = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(nu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nu_flat__;
        current_statement__ = 5;
        assign(nu_flat__, nil_index_list(), context__.vals_r("nu"),
          "assigning variable nu_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 5;
          assign(nu, cons_list(index_uni(sym1__), nil_index_list()),
            nu_flat__[(pos__ - 1)], "assigning variable nu");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> nu_free__;
      nu_free__ = Eigen::Matrix<double, -1, 1>(K);
      stan::math::fill(nu_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        current_statement__ = 5;
        assign(nu_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(nu[(sym1__ - 1)], 1),
          "assigning variable nu_free__");}
      Eigen::Matrix<double, -1, 1> C0;
      C0 = Eigen::Matrix<double, -1, 1>(C0_1dim__);
      stan::math::fill(C0, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> C0_flat__;
        current_statement__ = 6;
        assign(C0_flat__, nil_index_list(), context__.vals_r("C0"),
          "assigning variable C0_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
          current_statement__ = 6;
          assign(C0, cons_list(index_uni(sym1__), nil_index_list()),
            C0_flat__[(pos__ - 1)], "assigning variable C0");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> C0_free__;
      C0_free__ = Eigen::Matrix<double, -1, 1>(C0_1dim__);
      stan::math::fill(C0_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
        current_statement__ = 6;
        assign(C0_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(C0[(sym1__ - 1)], 0),
          "assigning variable C0_free__");}
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 7;
        assign(alpha_flat__, nil_index_list(), context__.vals_r("alpha"),
          "assigning variable alpha_flat__");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
          current_statement__ = 7;
          assign(alpha, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_flat__[(pos__ - 1)], "assigning variable alpha");
          current_statement__ = 7;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_free__;
      alpha_free__ = Eigen::Matrix<double, -1, 1>(alpha_1dim__);
      stan::math::fill(alpha_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        current_statement__ = 7;
        assign(alpha_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha[(sym1__ - 1)], 0),
          "assigning variable alpha_free__");}
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        vars__.emplace_back(theta_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(mu_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(sigma_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(xi[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        vars__.emplace_back(nu_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
        vars__.emplace_back(C0_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
        vars__.emplace_back(alpha_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("theta");
    names__.emplace_back("mu");
    names__.emplace_back("sigma");
    names__.emplace_back("xi");
    names__.emplace_back("nu");
    names__.emplace_back("C0");
    names__.emplace_back("alpha");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(K)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(C0_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(alpha_1dim__)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "C0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "nu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= C0_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "C0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= alpha_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"C0\",\"type\":{\"name\":\"vector\",\"length\":" << C0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_1dim__ << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << (K - 1) << "},\"block\":\"parameters\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"array\",\"length\":" << K << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"nu\",\"type\":{\"name\":\"vector\",\"length\":" << K << "},\"block\":\"parameters\"},{\"name\":\"C0\",\"type\":{\"name\":\"vector\",\"length\":" << C0_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << alpha_1dim__ << "},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_skew_t_mixture_namespace::model_skew_t_mixture;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_skew_t_mixture_namespace::profiles__;
}
#endif
#endif
